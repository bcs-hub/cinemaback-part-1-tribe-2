# PostgreSQL
spring.datasource.driverClassName=org.postgresql.Driver
# Takes the value of the environment variable SPRING_DATASOURCE_URL, or uses the default value
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5433/cinema}
spring.datasource.username=${POSTGRES_USER:postgres}
spring.datasource.password=${POSTGRES_PASSWORD:student123}

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.type.descriptor.sql=trace
logging.level.org.hibernate.orm.jdbc.bind=trace

# Automatically update tables when persistence objects have changed
# Make sure the tables are created before the application starts (if using docker compose, the database is created automatically if it does not exist)
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.jdbc.time_zone=UTC


# jwt
jwt.secret=${SPRING_JWT_SECRET:VWMrL1FmTGRoVnFja2RTcGEza09lbm1YY0w1RW1OUndvZDNhUC80Sy9OND0=}
jwt.expiration=604800000

# set logging level
logging.level.org.springframework.web=INFO

# Set admin user and password, can be overridden by environment variables (from .env file or docker-compose.yml)
admin.username=${SPRING_ADMIN_USERNAME:admin}
admin.password=${SPRING_ADMIN_PASSWORD:admin2}
admin.email=${SPRING_ADMIN_EMAIL:admin@abjakino.ee}

logging:
level:
org.hibernate.SQL: debug     # näed SELECT/INSERT/UPDATE/DELETE lauseid


springdoc.show-login-endpoint=true
