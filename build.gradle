plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'ttt.valiit'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.hsqldb:hsqldb:2.7.1'
	implementation 'org.springframework.boot:spring-boot-starter-cache'


	//	MapStruct
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	// JWT and Security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'
}

compileJava {
	// Ignoring Unmapped Properties (no error, no warning), Inject Spring Components into the Mapper
	options.compilerArgs += ['-Amapstruct.unmappedTargetPolicy=IGNORE', '-Amapstruct.defaultComponentModel=spring']
}

// Register the task to install Git hooks
tasks.register('installGitHooks', Copy) {
	description = 'Installs Git hooks'
	from fileTree('hooks') {
		include '**/*'
	}
	into '.git/hooks'
	doLast {
		fileTree('.git/hooks').files.each { file ->
			file.setExecutable(true)
		}
		println 'Git hooks installed.'
	}
}

// Automatically run the 'installGitHooks' task after project evaluation
gradle.projectsEvaluated {
	tasks.withType(JavaCompile).configureEach {
		dependsOn(tasks.named('installGitHooks'))
	}
}



tasks.named('test') {
	useJUnitPlatform()
}
